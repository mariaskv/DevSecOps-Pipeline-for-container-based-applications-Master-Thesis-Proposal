name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      environment:
        description: 'Environment to deploy'
        required: false
        default: 'staging'

jobs:
  build-and-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Unit Tests
        run:  mvn clean test
        working-directory: ./my-app

      - name: Send to Discord
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -X POST \
          -H "Content-Type: multipart/form-data" \
          -F "file=@./my-app/target/surefire-reports/com.example.AppTest.txt" \
          $DISCORD_WEBHOOK

      - name: Upload unit tests report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: com.example.AppTest.txt
          path: ./my-app/target/surefire-reports/


  # Job 2: Static and Security Analysis
  static-and-security-analysis:
    runs-on: ubuntu-latest
    needs: build-and-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Integration Tests
        run: mvn verify -Dskip.unit.tests=true -Ddependency-check.skip=true
        working-directory: ./my-app

      - name: Send to Discord
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -X POST \
          -H "Content-Type: multipart/form-data" \
          -F "file=@./my-app/target/failsafe-reports/failsafe-summary.xml" \
          $DISCORD_WEBHOOK
      
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: failsafe-summary.xml
          path: ./my-app/target/failsafe-reports/

      - name: Static test with SpotBugs
        id: spotbugs
        run: mvn spotbugs:check
        working-directory: ./my-app
    
      - name: Upload SpotBugs Report
        if: always() 
        uses: actions/upload-artifact@v4
        with:
          name: spotbugs.xml
          path: ./my-app/target/

      - name: Send to Discord
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -X POST \
          -H "Content-Type: multipart/form-data" \
          -F "file=@./my-app/target/spotbugs.xml" \
          $DISCORD_WEBHOOK

      - name: Fail if SpotBugs found issues
        if: failure() 
        run: echo "SpotBugs failed. Stopping the pipeline." && exit 1

      # Dependency Analysis with Trivy
      - name: Run Dependency Analysis with Trivy
        run: |
          docker run --rm \
            -v $(pwd):/app \
            aquasec/trivy:latest fs  --offline-scan --exit-code 1 --severity HIGH,CRITICAL /app/my-app > dependency-analysis.txt

      - name: Upload Dependency Analysis Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis-report
          path: dependency-analysis.txt

      - name: Send to Discord
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -X POST \
            -H "Content-Type: multipart/form-data" \
            -F "file=@dependency-analysis.txt" \
            $DISCORD_WEBHOOK
      
      - name: Scan for Secrets with Trivy
        run: |
          docker run --rm  \
          -v $(pwd)/my-app:/app:rw  \
          aquasec/trivy:latest repo \
          --scanners secret \
          --severity HIGH,CRITICAL \
          --offline-scan \
          /app > secrets-scanning.txt

      - name: Fail if Secrets Found
        run: |
          if grep -E "HIGH|CRITICAL|Detected secret" secrets-scanning.txt; then
          echo "Secrets found! Failing the job."
          exit 1
          else
          echo "No secrets found."
          fi

      - name: Upload Secrets Detection Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secrets-detection-report
          path: secrets-scanning.txt

      - name: Send to Discord
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -X POST \
          -H "Content-Type: multipart/form-data" \
          -F "file=@secrets-scanning.txt" \
          $DISCORD_WEBHOOK

  # Job 3: Docker Build, Runtime Security Test, and Push
  docker-scan-build-and-push:
    runs-on: ubuntu-latest
    # build-and-tests, 
    needs: [build-and-tests, static-and-security-analysis]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install Hadolint
        run: |
            wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
            chmod +x /usr/local/bin/hadolint
      
      - name: Lint Dockerfile with Hadolint
        run: hadolint --failure-threshold error my-app/dockerfile

      - name: Set up Docker
        working-directory: ./my-app
        run: |
          docker network create app_network 
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/book-management:latest --no-cache .
          docker run -d --name application-container --network app_network -p 8080:8080 ${{ secrets.DOCKER_HUB_USERNAME }}/book-management:latest
  
      - name: Wait for the application to start
        run: sleep 10  # Αναμονή 10 δευτερολέπτων για να ξεκινήσει η εφαρμογή
  
      - name: Check running containers
        run: docker ps
  
      - name: Check if app is running
        run: curl http://localhost:8080/books || (docker logs application-container && exit 1)

      - name: Arachni Scan 
        run: |
          mkdir -p $(pwd)/my-app/target/arachni-reports

          docker run --name arachni_scan  \
          --network app_network \
          -v $(pwd)/my-app/target/arachni-reports:/arachni/reports \
          arachni/arachni:latest \
          /bin/sh -c "
              /usr/local/arachni/bin/arachni http://application-container:8080/  --report-save-path /arachni/reports/scan_report.afr &&
              /usr/local/arachni/bin/arachni_reporter --report=json:outfile=/arachni/reports/scan_report.json /arachni/reports/scan_report.afr 
          " 

      - name: Stop Application
        run: docker stop application-container
              
      - name: Upload Arachni Report
        uses: actions/upload-artifact@v4
        with:
          name: arachni-report
          path: my-app/target/arachni-reports/scan_report.json

      - name: Fail if Vyln Found
        run: |
            if grep -E "medium: | high:" my-app/target/arachni-reports/scan_report.json; then
            echo "Vulnerabilities found! Failing the job."
            exit 1
            else
            echo "No vulnerabilities found."
            fi

      - name: Send to Discord
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -X POST \
          -H "Content-Type: multipart/form-data" \
          -F "file=@my-app/target/arachni-reports/scan_report.json" \
          $DISCORD_WEBHOOK

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
        
      - name: Scan Docker Image with Trivy
        run: |
            docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image --offline-scan \
            --severity MEDIUM,HIGH,CRITICAL \
            --exit-code 1 \
            ${{ secrets.DOCKER_HUB_USERNAME }}/book-management:latest

            docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image --offline-scan \
            --severity HIGH,CRITICAL,MEDIUM \
            --exit-code 0 \
            ${{ secrets.DOCKER_HUB_USERNAME }}/book-management:latest > trivy-report.txt
 

      - name: Upload Vulnerabilities Scan Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.txt

      - name: Send to Discord
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -X POST \
          -H "Content-Type: multipart/form-data" \
          -F "file=@trivy-report.txt" \
          $DISCORD_WEBHOOK

      - name: Scan Docker Image Filesystem with ClamAV
        run: |
          mkdir -p extracted
          docker create --name temp-container ${{ secrets.DOCKER_HUB_USERNAME }}/book-management:latest
          docker export temp-container > book-management.tar
          tar -xf book-management.tar -C extracted 
          docker run --rm \
          -v $(pwd)/extracted:/scan \
          clamav/clamav:latest clamscan -r /scan > clamav-report.txt || EXIT_CODE=$?
          cat clamav-report.txt
          if [ "$EXIT_CODE" -eq 1 ]; then
            echo "ClamAV found infected files. Failing the pipeline."
            exit 1
          elif [ "$EXIT_CODE" -gt 1 ]; then
            echo "ClamAV encountered an error during the scan. Failing the pipeline."
            exit $EXIT_CODE
          fi
        
      - name: Upload ClamAV Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: clamav-report
          path: clamav-report.txt

      - name: Send to Discord
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -X POST \
          -H "Content-Type: multipart/form-data" \
          -F "file=@clamav-report.txt" \
          $DISCORD_WEBHOOK

      - name: Push Docker image
        if: success()
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/book-management:latest

      - name: Install Cosign
        run: |
          wget https://github.com/sigstore/cosign/releases/download/v1.4.1/cosign-linux-amd64
          chmod +x cosign-linux-amd64
          mv cosign-linux-amd64 /usr/local/bin/cosign
    
      - name: Sign Docker image
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          echo "${{ secrets.COSIGN_KEY }}" > cosign.key
          cosign sign --key cosign.key ${{ secrets.DOCKER_HUB_USERNAME }}/book-management:latest

      - name: Verify Docker image
        env:
          COSIGN_PUB: ${{ secrets.COSIGN_PUB }}
        run: |
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/book-management:latest
          cosign verify --key my-app/cosign.pub ${{ secrets.DOCKER_HUB_USERNAME }}/book-management:latest
